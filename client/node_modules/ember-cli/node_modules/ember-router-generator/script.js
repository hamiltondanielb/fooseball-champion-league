var fs = require('fs');
var EmberRouterGenerator = require('./index.js');
var source = fs.readFileSync('route.js');
var routes = new EmberRouterGenerator(source);
var newRoutes = routes.add('friends/bar/bar/foaodfasdfasdf');
recast = require('recast')
fs.writeFileSync('router2.js', recast.print(newRoutes.ast).code);

// var recast = require("recast");

// // Let's turn this function declaration into a variable declaration.
// var code = fs.readFileSync('route.js');

// // Parse the code using an interface similar to require("esprima").parse.
// var ast = recast.parse(code);

// // var add = ast.program.body[0];

// // // Make sure it's a FunctionDeclaration (optional).
// // var n = recast.types.namedTypes;
// // n.FunctionDeclaration.assert(add);

// // // If you choose to use recast.builders to construct new AST nodes, all builder
// // // arguments will be dynamically type-checked against the Mozilla Parser API.
// // var b = recast.types.builders;

// // // This kind of manipulation should seem familiar if you've used Esprima or the
// // // Mozilla Parser API before.
// // ast.program.body[0] = b.variableDeclaration("var", [
// //     b.variableDeclarator(add.id, b.functionExpression(
// //         null, // Anonymize the function expression.
// //         add.params,
// //         add.body
// //     ))
// // ]);

// // // Just for fun, because addition is commutative:
// // add.params.push(add.params.shift());

// findFunctionExpression = require('./lib/helpers/find-function-expression')

// f = builders.expressionStatement(
//     builders.callExpression(
//       builders.memberExpression(
//         builders.thisExpression(),
//         builders.identifier('resource'),
//         false
//       ),
//       [builders.literal('whaaaaaatt')]
//     )
// );

// var EmberRouterGenerator = require('./index.js');
// var source = fs.readFileSync('route.js');
// var routes = new EmberRouterGenerator(source);
// routes._add.call(
//   routes,
//   'fooobababo'.split('/'),
//   routes.mapNode.arguments[0].body.body,
//   {}
// )
// ast.program.body[3].expression.arguments[0].body.body[0].expression.arguments[1].body.body.push(f)
// // ast.program.body[3].expression.arguments[0].body.body.push(f)
// var output = recast.print(ast, { tabWidth: 2 }).code;

// fs.writeFileSync('route2.js', output);
